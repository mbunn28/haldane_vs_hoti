#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import ti
import numpy as np
import scipy as sp
import scipy.optimize as opt
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

N = 200
values = np.zeros(4*N)
xvals = np.zeros(4*N)
for i in range(0,N):
    lattice = ti.Lattice(
    PBC_i = True,
    PBC_j = True,
    Corners = False,
    alpha = 0.5,
    hal = 0.005*i,
    M=0,
    N=7)

    lattice.large_hal = False
    lattice.large_alpha=False
    res = opt.minimize_scalar(lattice.min_energy, bounds=(0,1), method='bounded', tol=1e-6)
    values[i] = res.x
    xvals[i] = 0.005*i

    lattice.large_hal = True

    res = opt.minimize_scalar(lattice.min_energy, bounds=(0,1), method='bounded', tol=1e-6)
    values[2*N-i-1] = res.x
    xvals[2*N-i-1] = 2-0.005*i

    lattice.large_alpha=True

    res = opt.minimize_scalar(lattice.min_energy, bounds=(0,1), method='bounded', tol=1e-6)
    values[i+2*N] = 2-res.x
    xvals[i+2*N] = 2-0.005*i

    lattice.large_hal=False

    res = opt.minimize_scalar(lattice.min_energy, bounds=(0,1), method='bounded', tol=1e-6)
    values[4*N-i-1] = 2-res.x
    xvals[4*N-i-1] = 0.005*i

    print(f"{i}/{N}", end='\r')

fig = plt.figure()
plt.plot(xvals,values)
fig.suptitle("Phase Diagram")
plt.xlabel('Lambda')
plt.ylabel('Alpha')
plt.ylim(0,2)
plt.xlim(0,2)
plt.xticks(np.arange(0,2,0.25),('0','0.25','0.5','0.75','1','1/0.75','1/0.5','1/0.25','Inf'))
plt.yticks(np.arange(0,2,0.25),('0','0.25','0.5','0.75','1','1/0.75','1/0.5','1/0.25','Inf'))
fig.savefig(f"output/phase_diagram.pdf")
plt.close(fig)
